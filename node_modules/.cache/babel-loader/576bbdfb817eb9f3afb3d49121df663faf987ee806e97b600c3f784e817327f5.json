{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //массив карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  //информация пользователя (о себе)\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n  //установить данные о себе\n  setUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    }).then(this._getResponse);\n  }\n  //создать карточку\n  createCard(newCard) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: `${newCard.name}`,\n        link: `${newCard.link}`\n      })\n    }).then(this._getResponse);\n  }\n  //удалить карточку\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n  }\n  //установить аватар\n  setUserAvatar(img) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: `${img.avatar}`\n      })\n    }).then(this._getResponse);\n  }\n\n  //лайки\n  changeLikeCardStatus(id, isLiked) {\n    if (!isLiked) {\n      isLiked = true;\n    } else {\n      isLiked = false;\n    }\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  // //установить лайк\n  // setLike(id) {\n  //   return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n  //     method: 'PUT',\n  //     headers: this._headers,\n  //   }).then(this._getResponse);\n  // }\n  // //убрать лайк\n  // deleteLike(id) {\n  //   return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n  //     method: 'DELETE',\n  //     headers: this._headers,\n  //   }).then(this._getResponse);\n  // }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n  headers: {\n    authorization: 'ff56f93d-d478-42ff-a22e-0db12fad9894',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_getResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","setUserInfo","userData","method","body","JSON","stringify","name","about","createCard","newCard","link","deleteCard","id","setUserAvatar","img","avatar","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/Users/veronikagennadevna/Desktop/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //массив карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  //информация пользователя (о себе)\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n  //установить данные о себе\n  setUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about,\n      }),\n    }).then(this._getResponse);\n  }\n  //создать карточку\n  createCard(newCard) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: `${newCard.name}`,\n        link: `${newCard.link}`,\n      }),\n    }).then(this._getResponse);\n  }\n  //удалить карточку\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n  }\n  //установить аватар\n  setUserAvatar(img) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: `${img.avatar}`,\n      }),\n    }).then(this._getResponse);\n  }\n\n  //лайки\n  changeLikeCardStatus(id, isLiked) {\n    if (!isLiked) {\n      isLiked = true;\n    } else {\n      isLiked = false;\n    }\n\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers,\n    }).then(this._getResponse);\n  }\n\n  // //установить лайк\n  // setLike(id) {\n  //   return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n  //     method: 'PUT',\n  //     headers: this._headers,\n  //   }).then(this._getResponse);\n  // }\n  // //убрать лайк\n  // deleteLike(id) {\n  //   return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n  //     method: 'DELETE',\n  //     headers: this._headers,\n  //   }).then(this._getResponse);\n  // }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n  headers: {\n    authorization: 'ff56f93d-d478-42ff-a22e-0db12fad9894',\n    'Content-Type': 'application/json',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}